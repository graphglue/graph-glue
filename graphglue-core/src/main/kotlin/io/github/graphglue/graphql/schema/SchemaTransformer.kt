package io.github.graphglue.graphql.schema

import com.expediagroup.graphql.generator.execution.KotlinDataFetcherFactoryProvider
import graphql.schema.*
import io.github.graphglue.connection.filter.definition.FilterDefinitionCollection
import io.github.graphglue.connection.filter.definition.SubFilterGenerator
import io.github.graphglue.definition.NodeDefinition
import io.github.graphglue.definition.NodeDefinitionCollection
import io.github.graphglue.model.DomainNode
import io.github.graphglue.model.Node
import io.github.graphglue.util.CacheMap
import org.springframework.data.neo4j.core.mapping.Neo4jMappingContext

/**
 * Used to transform a GraphQL schema generated by graphql-kotlin
 * Adds top level queries based on the [DomainNode] annotation
 * Adds fields to [Node] types and interfaces
 */
interface SchemaTransformer {
    /**
     * mapping context used to get type information from Neo4j
     */
    val mappingContext: Neo4jMappingContext

    /**
     * collection of all [NodeDefinition]s
     */
    val nodeDefinitionCollection: NodeDefinitionCollection

    /**
     * provides function and property data fetchers
     */
    val dataFetcherFactoryProvider: KotlinDataFetcherFactoryProvider

    /**
     * used to generate the filter entries
     */
    val subFilterGenerator: SubFilterGenerator

    /**
     * Cache for [GraphQLInputType]s
     */
    val inputTypeCache: CacheMap<String, GraphQLInputType>

    /**
     * Cache for [GraphQLOutputType]s
     */
    val outputTypeCache: CacheMap<String, GraphQLOutputType>

    /**
     * The new modified schema
     */
    val schema: GraphQLSchema

    /**
     * Collection with all filter definitions
     */
    val filterDefinitionCollection: FilterDefinitionCollection

    /**
     * Whether to include the skip field in the connection
     */
    val includeSkipField: Boolean
}

